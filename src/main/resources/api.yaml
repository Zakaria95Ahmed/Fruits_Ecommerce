openapi: 3.0.0
info:
  title: Fruits E-commerce API
  description: API To manage an online fruit e-commerce platform.
  version: 1.0.0

servers:
  - url: http://localhost:9090/api
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Products
    description: Product management
  - name: Cart
    description: Shopping cart management

paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data
        '409':
          description: User already exists
        '500':
          description: Internal server error

  /auth/login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /auth/lock-user:
    post:
      summary: Lock a user account
      operationId: lockUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: identifier
          required: true
          schema:
            type: string
          description: Username or email of the user to lock
      responses:
        '200':
          description: User account locked successfully
        '400':
          description: Invalid identifier
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal server error

  /auth/unlock-user:
    post:
      summary: Unlock a user account
      operationId: unlockUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: identifier
          required: true
          schema:
            type: string
          description: Username or email of the user to unlock
      responses:
        '200':
          description: User account unlocked successfully
        '400':
          description: Invalid identifier
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal server error

  /auth/{userId}/add:
    post:
      summary: Add a role to a user
      operationId: addRoleToUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: User ID
        - in: query
          name: roleType
          required: true
          schema:
            $ref: '#/components/schemas/RoleType'
          description: Role to add to the user
      responses:
        '200':
          description: Role added to user successfully
        '400':
          description: Invalid role type
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal server error

  /auth/{userId}/remove:
    delete:
      summary: Remove a role from a user
      operationId: removeRoleFromUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: User ID
        - in: query
          name: roleType
          required: true
          schema:
            $ref: '#/components/schemas/RoleType'
          description: Role to remove from the user
      responses:
        '200':
          description: Role removed from user successfully
        '400':
          description: Invalid role type
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal server error

  /cart/add:
    post:
      summary: Add a product to the cart
      operationId: addProductToCart
      tags:
        - Cart
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                  description: ID of the product to add
                quantity:
                  type: integer
                  description: Quantity of the product
      responses:
        '200':
          description: Product added to cart successfully
        '400':
          description: Invalid product data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /cart:
    get:
      summary: Get cart details
      operationId: getCartDetails
      tags:
        - Cart
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Cart details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDTO'
        '401':
          description: Unauthorized
        '404':
          description: Cart not found
        '500':
          description: Internal server error

  /products/admin:
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '201':
          description: Product successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Invalid product data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /products:
    get:
      summary: Get list of products
      operationId: getProducts
      tags:
        - Products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductDTO'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  number:
                    type: integer
        '500':
          description: Internal server error

  /products/{id}:
    get:
      summary: Get product by ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /products/admin/images/upload:
    post:
      summary: Upload images independently
      operationId: uploadImages
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductImageDTO'
        '400':
          description: Invalid image data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /products/admin/{productId}/images:
    post:
      summary: Add images to a product
      operationId: addImagesToProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Images added to product successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductImageDTO'
        '400':
          description: Invalid image data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /products/admin/{productId}/images/link:
    put:
      summary: Link existing images to a product
      operationId: linkImagesToProduct
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: Images linked to product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '400':
          description: Invalid image IDs
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product or images not found
        '500':
          description: Internal server error

  /products/admin/images/{id}:
    delete:
      summary: Delete image by ID
      operationId: deleteImage
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Image ID
      responses:
        '204':
          description: Image deleted successfully
        '404':
          description: Image not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /products/images/id/{id}:
    get:
      summary: Get image by ID
      operationId: getImageById
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Image ID
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
        '500':
          description: Internal server error

  /products/images/file/{filename}:
    get:
      summary: Get image by filename
      operationId: getImageByFilename
      tags:
        - Products
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Image filename
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
        '500':
          description: Internal server error

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleType'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - username
        - email
        - password

    LoginRequestDTO:
      type: object
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
      required:
        - usernameOrEmail
        - password

    AuthResponseDTO:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
          default: Bearer
        user:
          $ref: '#/components/schemas/UserDTO'

    RoleType:
      type: string
      enum:
        - ROLE_USER
        - ROLE_ADMIN
        -
    CartDTO:
      type: object
      properties:
        id:
          type: integer
        shippingCost:
          type: number
          format: float
        discount:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDTO'

    CartItemDTO:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductDTO'
        quantity:
          type: integer

    ProductDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        unit:
          type: string
        price:
          type: number
          format: double
        description:
          type: string
        imageUrls:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - price

    ProductImageDTO:
      type: object
      properties:
        id:
          type: integer
        imageUrl:
          type: string
        filePath:
          type: string
        createdAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT